// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package scion

import (
	"github.com/scionproto/scion/pkg/slayers/path"
	"github.com/scionproto/scion/verification/utils/slices"
)

pred (d *Decoded) NonInitMem() {
	acc(&d.InfoFields) &&
	acc(&d.HopFields) &&
		d.Base.NonInitMem()
}

pred (d *Decoded) Mem() {
	d.Base.Mem() &&
		acc(&d.InfoFields) &&
		(forall i int :: 0 <= i && i < len(d.InfoFields) ==>
			acc(&d.InfoFields[i])) &&
		len(d.InfoFields) == d.Base.getNumINF() &&
		d.Base.getNumINF() <= MaxINFs &&
		acc(&d.HopFields) &&
		(forall i int :: 0 <= i && i < len(d.HopFields) ==>
			d.HopFields[i].Mem()) &&
		len(d.HopFields) == d.Base.getNumHops()
}

requires acc(d.Mem(), _)
decreases
pure func (d *Decoded) getLenInfoFields() int {
	return unfolding acc(d.Mem(), _) in len(d.InfoFields)
}

requires acc(d.Mem(), _)
decreases
pure func (d *Decoded) getLenHopFields() int {
	return unfolding acc(d.Mem(), _) in len(d.HopFields)
}
