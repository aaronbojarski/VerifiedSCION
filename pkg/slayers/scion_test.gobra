// Copyright 2022 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package slayers

import (
	sl "github.com/scionproto/scion/verification/utils/slices"
	"github.com/scionproto/scion/pkg/addr"
)

// These tests show the behavior of SetSrcAddr when an addr.Host of type addr.HostTypeIP is passed
requires acc(&s.RawSrcAddr)
requires acc(&s.SrcAddrType)
requires src.Type() == addr.HostTypeIP
func testSrcSetter(s *SCION, src addr.Host) {
	res := s.SetSrcAddr(src)
	unfold sl.Bytes(s.RawSrcAddr, 0, len(s.RawSrcAddr))
	assert forall i int :: { &s.RawSrcAddr[i] } 0 <= i && i < len(s.RawSrcAddr) ==> acc(&s.RawSrcAddr[i])
}

// These tests show the behavior of SetSrcAddr when an addr.Host of type addr.HostTypeSVC is passed
requires acc(&s.RawSrcAddr)
requires acc(&s.SrcAddrType)
requires src.Type() == addr.HostTypeSVC
func testSrcSetterSVC(s *SCION, src addr.Host) {
	res := s.SetSrcAddr(src)
	unfold sl.Bytes(s.RawSrcAddr, 0, len(s.RawSrcAddr))
	assert forall i int :: { &s.RawSrcAddr[i] } 0 <= i && i < len(s.RawSrcAddr) ==> acc(&s.RawSrcAddr[i])
}

// These tests show the behavior of SetDstAddr when an addr.Host of type addr.HostTypeIP is passed
requires acc(&s.RawDstAddr)
requires acc(&s.DstAddrType)
requires dst.Type() == addr.HostTypeIP
func testDstSetter(s *SCION, dst addr.Host) {
	res := s.SetDstAddr(dst)
	unfold sl.Bytes(s.RawDstAddr, 0, len(s.RawDstAddr))
	assert forall i int :: { &s.RawDstAddr[i] } 0 <= i && i < len(s.RawDstAddr) ==> acc(&s.RawDstAddr[i])
}

// These tests show the behavior of SetDstAddr when an addr.Host of type addr.HostTypeSVC is passed
requires acc(&s.RawDstAddr)
requires acc(&s.DstAddrType)
requires dst.Type() == addr.HostTypeSVC
func testDstSetterSVC(s *SCION, dst addr.Host) {
	res := s.SetDstAddr(dst)
	unfold sl.Bytes(s.RawDstAddr, 0, len(s.RawDstAddr))
	assert forall i int :: { &s.RawDstAddr[i] } 0 <= i && i < len(s.RawDstAddr) ==> acc(&s.RawDstAddr[i])
}
