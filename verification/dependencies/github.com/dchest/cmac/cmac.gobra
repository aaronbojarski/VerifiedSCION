// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// CMAC message authentication code, defined in
// NIST Special Publication SP 800-38B.

// +gobra

package cmac

import (
	"crypto/cipher"
	"hash"

	def "github.com/scionproto/scion/verification/utils/definitions"
	sl "github.com/scionproto/scion/verification/utils/slices"
)

type cmac struct {
	privateField def.PrivateField
}

pred (c *cmac) Mem() {
	acc(c)
}

decreases
pure func (d *cmac) BlockSizeSpec() int

preserves c != nil && c.Mem()
ensures   typeOf(h) == type[*cmac]
ensures   err == nil ==> h.Mem()
ensures   err == nil ==> h.BlockSizeSpec() == c.BlockSize()
ensures   err != nil ==> err.ErrorMem()
decreases
func New(c cipher.Block) (h hash.Hash, err error)

preserves d.Mem() 
preserves acc(p, 1/1000)
ensures   err != nil ==> err.ErrorMem()
decreases
func (d *cmac) Write(p []byte) (n int, err error)

requires  sl.Bytes(b, 0, len(b))
ensures   cap(b) >= d.BlockSizeSpec() ==> sl.Bytes(b, 0, d.BlockSizeSpec())
decreases
func (d *cmac) Sum(b []byte) []byte 
